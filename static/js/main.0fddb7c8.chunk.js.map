{"version":3,"sources":["utils/fb.js","CustomerChat.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["canUseDOM","initialized","queue","CustomerChat","_this","this","timeout","setTimeout","callback","FB","XFBML","parse","window","push","fbAsyncInit","init","appId","autoLogAppEvents","status","cookie","xfbml","version","forEach","cb","loadScript","async","clearTimeout","react_default","a","createElement","className","attribution","page_id","React","PureComponent","App","src","logo","alt","href","target","rel","src_CustomerChat","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"qSASIA,GAAY,EAEZC,GAAc,EACdC,EAAQ,OCsBGC,8LA7BO,IAAAC,EAAAC,KAClBA,KAAKC,QAAUC,WAAW,WDQvB,IAAYC,ICPV,SAAAC,GAAE,OAAIL,EAAKE,SAAWG,EAAGC,MAAMC,SDQjCX,IAEMC,EACTO,EAASI,OAAOH,KAEhBP,EAAMW,KAAKL,GACNI,OAAOE,cAEVF,OAAOE,YAAc,WACnBF,OAAOH,GAAGM,KAAK,CACbC,MAAO,kBACPC,kBAAkB,EAClBC,QAAQ,EACRC,QAAQ,EACRC,OAAO,EACPC,QAAS,SAEXpB,GAAc,EACdC,EAAMoB,QAAQ,SAAAC,GAAE,OAAIA,EAAGX,OAAOH,MAC9BP,EAAQ,MAEVsB,IAAW,+DAAgE,CAAEC,OAAO,QC5BnF,oDAIHC,aAAarB,KAAKC,gBACXD,KAAKC,yCAIZ,OACEqB,EAAAC,EAAAC,cAAA,OACEC,UAAU,kBACVC,YAAY,aACZC,QAAQ,2BAjBWC,IAAMC,eCuBlBC,MAtBf,WACE,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKO,IAAKC,IAAMP,UAAU,WAAWQ,IAAI,SACzCX,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVS,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,gBASFd,EAAAC,EAAAC,cAACa,EAAD,QCVcC,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.0fddb7c8.chunk.js","sourcesContent":["/**\n * React Starter Kit for Firebase\n * https://github.com/kriasoft/react-firebase-starter\n * Copyright (c) 2015-present Kriasoft | MIT License\n */\n\nimport loadScript from \"load-script\";\n// import { canUseDOM } from \"./env\";\n\nlet canUseDOM = true;\n\nlet initialized = false;\nlet queue = [];\n\nexport function fb(callback) {\n  if (!canUseDOM) {\n    return;\n  } else if (initialized) {\n    callback(window.FB);\n  } else {\n    queue.push(callback);\n    if (!window.fbAsyncInit) {\n      // https://developers.facebook.com/docs/javascript/reference/FB.init\n      window.fbAsyncInit = () => {\n        window.FB.init({\n          appId: \"814038118801156\",\n          autoLogAppEvents: true,\n          status: true,\n          cookie: true,\n          xfbml: false,\n          version: \"v3.2\"\n        });\n        initialized = true;\n        queue.forEach(cb => cb(window.FB));\n        queue = null;\n      };\n      loadScript(\"https://connect.facebook.net/en_US/sdk/xfbml.customerchat.js\", { async: true }); // prettier-ignore\n    }\n  }\n}\n","import React from \"react\";\nimport { fb } from \"./utils\";\n\n// https://developers.facebook.com/docs/messenger-platform/discovery/customer-chat-plugin\nclass CustomerChat extends React.PureComponent {\n  componentDidMount() {\n    this.timeout = setTimeout(() => {\n      fb(FB => this.timeout && FB.XFBML.parse());\n    }, 3000);\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timeout);\n    delete this.timeout;\n  }\n\n  render() {\n    return (\n      <div\n        className=\"fb-customerchat\"\n        attribution=\"setup_tool\"\n        page_id=\"164726754368030\"\n        // theme_color=\"...\"\n        // logged_in_greeting=\"...\"\n        // logged_out_greeting=\"...\"\n        // greeting_dialog_display=\"...\"\n        // greeting_dialog_delay=\"...\"\n        // minimized=\"false\"\n        // ref=\"...\"\n      />\n    );\n  }\n}\n\nexport default CustomerChat;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport CustomerChat from \"./CustomerChat\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <CustomerChat />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}